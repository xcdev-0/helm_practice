apiVersion: apps/v1
kind: Deployment
metadata:
  name: chat-server
  namespace: app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: chat-server
  template:
    metadata:
      labels:
        app: chat-server
    spec:
      volumes:
        - name: kafka-truststore
          configMap:
            name: kafka-truststore
      containers:
        - name: chat-server
          image: chat-server:newonev2
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
          volumeMounts:
          - name: kafka-truststore
            mountPath: /app/config
            readOnly: true
          env:
            # 프로파일
            - name: SPRING_PROFILES_ACTIVE
              value: prod

            - name: KAFKA_PASSWORD
              value: user1password

            - name: KAFKA_TRUSTSTORE_PASSWORD
              value: thisistruststorepassword

            - name: JWT_SECRET
              value: T+FITVBc8qEi9tZ/TgN7mfZ9wb0BqArbh4B+RMZ9zKU=

            # 기본값 없는 것들만 직접 지정 (나머지는 생략해서 기본값 사용)
            - name: KAFKA_BOOTSTRAP_SERVERS
              value: "my-kafka.kafka.svc.cluster.local:9092"

            - name: DB_URL
              value: "jdbc:mysql://my-mysql.mysql.svc.cluster.local:3306/chat_db"
            - name: DB_USERNAME
              value: "thisismysqlusername"
            - name: DB_PASSWORD
              value: "thisismysqlusernamepassword"

            - name: REDIS_HOST
              value: "my-redis-master.redis.svc.cluster.local"

            - name: REDIS_PASSWORD
              value: "thisisredispassword"
            
            - name: JPA_DDL_AUTO
              value: "create"

            # - name: JPA_SHOW_SQL
            #   value: "true"

            # - name: JPA_FORMAT_SQL
            #   value: "true"
            
            - name: FRONT_END_URL
              value: http://localhost:3001



# mkdir -p /tmp/jar_extract && cd /tmp/jar_extract && jar -xf /app.jar