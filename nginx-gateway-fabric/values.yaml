# yaml-language-server: $schema=values.schema.json

# -- The DNS cluster domain of your Kubernetes cluster.
clusterDomain: cluster.local

# -- The nginxGateway section contains configuration for the NGINX Gateway Fabric control plane deployment.
nginxGateway:
  # @schema
  # const: deployment
  # @schema
  # -- The kind of the NGINX Gateway Fabric installation - currently, only deployment is supported.
  kind: deployment

  # -- The name of the NGINX Gateway Fabric deployment - if not present, then by default uses release name given during installation.
  name: ""

  # @schema
  # required: true
  # type: string
  # @schema
  # -- The name of the GatewayClass that will be created as part of this release. Every NGINX Gateway
  # Fabric must have a unique corresponding GatewayClass resource. NGINX Gateway Fabric only processes resources that
  # belong to its class - i.e. have the "gatewayClassName" field resource equal to the class.
  gatewayClassName: nginx

  # -- Set of custom annotations for the NGINX Gateway Fabric pods.
  podAnnotations: {}

  # -- Set of labels to be added for NGINX Gateway Fabric deployment.
  labels: {}

  # -- Set of custom annotations for GatewayClass objects.
  gatewayClassAnnotations: {}

  # @schema
  # pattern: ^gateway.nginx.org/.*
  # required: true
  # @schema
  # -- The name of the Gateway controller. The controller name must be of the form: DOMAIN/PATH. The controller's domain
  # is gateway.nginx.org.
  gatewayControllerName: gateway.nginx.org/nginx-gateway-controller

  # The dynamic configuration for the control plane that is contained in the NginxGateway resource.
  config:
    logging:
      # @schema
      # enum:
      #   - info
      #   - debug
      #   - error
      # @schema
      # -- Log level.
      level: info

  # -- Set of custom annotations for NginxGateway objects.
  configAnnotations: {}

  # -- The service configuration for the NGINX Gateway Fabric control plane.
  service:
    # -- The annotations of the NGINX Gateway Fabric control plane service.
    annotations: {}

    # -- The labels of the NGINX Gateway Fabric control plane service.
    labels: {}

  # -- The serviceaccount configuration for the NGINX Gateway Fabric control plane.
  serviceAccount:
    # -- Set of custom annotations for the NGINX Gateway Fabric control plane service account.
    annotations: {}

    # -- The name of the service account of the NGINX Gateway Fabric control plane pods. Used for RBAC.
    # @default -- Autogenerated if not set or set to ""
    name: ""

    # -- The name of the secret containing docker registry credentials for the control plane.
    # Secret must exist in the same namespace as the helm release.
    imagePullSecret: ""

    # -- A list of secret names containing docker registry credentials for the control plane.
    # Secrets must exist in the same namespace as the helm release.
    imagePullSecrets: []

  # -- The number of replicas of the NGINX Gateway Fabric Deployment. This value is ignored if autoscaling.enable is true.
  replicas: 1

  # The configuration for leader election.
  leaderElection:
    # -- Enable leader election. Leader election is used to avoid multiple replicas of the NGINX Gateway Fabric
    # reporting the status of the Gateway API resources. If not enabled, all replicas of NGINX Gateway Fabric
    # will update the statuses of the Gateway API resources.
    enable: true

    # -- The name of the leader election lock. A Lease object with this name will be created in the same Namespace as
    # the controller.
    # @default -- Autogenerated if not set or set to "".
    lockName: ""

  ## Defines the settings for the control plane readiness probe. This probe returns Ready when the controller
  ## has started and is ready to configure NGINX.
  readinessProbe:
    # -- Enable the /readyz endpoint on the control plane.
    enable: true

    # @schema
    # type: integer
    # minimum: 1
    # maximum: 65535
    # @schema
    # -- Port in which the readiness endpoint is exposed.
    port: 8081

    # -- The number of seconds after the Pod has started before the readiness probes are initiated.
    initialDelaySeconds: 3

  # -- The image configuration for the NGINX Gateway Fabric control plane.
  image:
    # -- The NGINX Gateway Fabric image to use
    repository: ghcr.io/nginx/nginx-gateway-fabric
    tag: 2.1.1
    # @schema
    # enum:
    #   - Always
    #   - IfNotPresent
    #   - Never
    # @schema
    pullPolicy: IfNotPresent

  productTelemetry:
    # -- Enable the collection of product telemetry.
    enable: true

  # -- The lifecycle of the nginx-gateway container.
  lifecycle: {}

  # -- The resource requests and/or limits of the nginx-gateway container.
  resources: {}

  # -- extraVolumes for the NGINX Gateway Fabric control plane pod. Use in conjunction with
  # nginxGateway.extraVolumeMounts mount additional volumes to the container.
  extraVolumes: []

  # -- extraVolumeMounts are the additional volume mounts for the nginx-gateway container.
  extraVolumeMounts: []

  # -- The termination grace period of the NGINX Gateway Fabric control plane pod.
  terminationGracePeriodSeconds: 30

  # -- Tolerations for the NGINX Gateway Fabric control plane pod.
  tolerations: []

  # -- The nodeSelector of the NGINX Gateway Fabric control plane pod.
  nodeSelector: {}

  # -- The affinity of the NGINX Gateway Fabric control plane pod.
  affinity: {}

  # -- The topology spread constraints for the NGINX Gateway Fabric control plane pod.
  topologySpreadConstraints: []

  # -- Autoscaling configuration for the NGINX Gateway Fabric control plane.
  autoscaling:
    # -- Enable or disable Horizontal Pod Autoscaler for the control plane.
    enable: false
    # annotations: {}
    # minReplicas: 1
    # maxReplicas: 11
    # targetCPUUtilizationPercentage: 50
    # targetMemoryUtilizationPercentage: 50
    # behavior:
      # scaleDown:
      #   stabilizationWindowSeconds: 300
      #   policies:
      #   - type: Pods
      #     value: 1
      #     periodSeconds: 180
      # scaleUp:
      #   stabilizationWindowSeconds: 300
      #   policies:
      #   - type: Pods
      #     value: 2
      #     periodSeconds: 60
    # Custom or additional autoscaling metrics. https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#scaling-on-custom-metrics
    # metrics:
    # - type: Pods
    #   pods:
    #     metric:
    #       name: container_memory_usage_bytes
    #     target:
    #       type: AverageValue
    #       averageValue: "400Mi"

  metrics:
    # -- Enable exposing metrics in the Prometheus format.
    enable: true

    # @schema
    # type: integer
    # minimum: 1
    # maximum: 65535
    # @schema
    # -- Set the port where the Prometheus metrics are exposed.
    port: 9113

    # -- Enable serving metrics via https. By default metrics are served via http.
    # Please note that this endpoint will be secured with a self-signed certificate.
    secure: false

  gwAPIExperimentalFeatures:
    # -- Enable the experimental features of Gateway API which are supported by NGINX Gateway Fabric. Requires the Gateway
    # APIs installed from the experimental channel.
    enable: false

  snippetsFilters:
    # -- Enable SnippetsFilters feature. SnippetsFilters allow inserting NGINX configuration into the generated NGINX
    # config for HTTPRoute and GRPCRoute resources.
    enable: false

# -- The nginx section contains the configuration for all NGINX data plane deployments
# installed by the NGINX Gateway Fabric control plane.
nginx:
  # @schema
  # enum:
  #   - deployment
  #   - daemonSet
  # @schema
  # -- The kind of NGINX deployment.
  kind: deployment

  # -- The number of replicas of the NGINX Deployment. This value is ignored if autoscaling.enable is true.
  replicas: 1

  # -- Custom patches to apply to the NGINX Deployment/DaemonSet.
  patches: []
  # -- Example:
  # - type: StrategicMerge
  #   value:
  #     metadata:
  #       labels:
  #         team: "nginx-gateway-fabric"

  # -- Autoscaling configuration for the NGINX data plane.
  autoscaling:
    # -- Enable or disable Horizontal Pod Autoscaler for the NGINX data plane.
    enable: false
    # minReplicas: 1
    # maxReplicas: 11
    # targetCPUUtilizationPercentage: 50
    # targetMemoryUtilizationPercentage: 50
    # behavior:
      # scaleDown:
      #   stabilizationWindowSeconds: 300
      #   policies:
      #   - type: Pods
      #     value: 1
      #     periodSeconds: 180
      # scaleUp:
      #   stabilizationWindowSeconds: 300
      #   policies:
      #   - type: Pods
      #     value: 2
      #     periodSeconds: 60
    # Custom or additional autoscaling metrics. https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#scaling-on-custom-metrics
    # metrics:
    # - type: Pods
    #   pods:
    #     metric:
    #       name: nginx_gateway_fabric_nginx_process_requests_total
    #     target:
    #       type: AverageValue
    #       averageValue: 400
  image:
    # -- The NGINX image to use.
    repository: ghcr.io/nginx/nginx-gateway-fabric/nginx
    tag: 2.1.1
    # @schema
    # enum:
    #   - Always
    #   - IfNotPresent
    #   - Never
    # @schema
    pullPolicy: IfNotPresent

  # -- Is NGINX Plus image being used.
  plus: false

  # -- Configuration for NGINX One Console.
  nginxOneConsole:
    # -- Name of the secret which holds the dataplane key that is required to authenticate with the NGINX One Console.
    # Secret must exist in the same namespace that the NGINX Gateway Fabric control plane is running in
    # (default namespace: nginx-gateway).
    dataplaneKeySecretName: ""

    # -- The Endpoint host that the NGINX One Console telemetry metrics will be sent to.
    endpointHost: "agent.connect.nginx.com"

    # @schema
    # type: integer
    # minimum: 1
    # maximum: 65535
    # @schema
    # -- The endpoint port that the NGINX One Console telemetry metrics will be sent to.
    endpointPort: 443

    # -- Skip TLS verification for NGINX One Console connections.
    skipVerify: false

  # -- The name of the secret containing docker registry credentials.
  # Secret must exist in the same namespace as the helm release. The control
  # plane will copy this secret into any namespace where NGINX is deployed.
  imagePullSecret: ""

  # -- A list of secret names containing docker registry credentials.
  # Secrets must exist in the same namespace as the helm release. The control
  # plane will copy these secrets into any namespace where NGINX is deployed.
  imagePullSecrets: []

  # Configuration for NGINX Plus usage reporting.
  usage:
    # -- The name of the Secret containing the JWT for NGINX Plus usage reporting. Must exist in the same namespace
    # that the NGINX Gateway Fabric control plane is running in (default namespace: nginx-gateway).
    secretName: "nplus-license"

    # -- The endpoint of the NGINX Plus usage reporting server. Default: product.connect.nginx.com
    endpoint: ""

    # -- The nameserver used to resolve the NGINX Plus usage reporting endpoint. Used with NGINX Instance Manager.
    resolver: ""

    # -- Disable client verification of the NGINX Plus usage reporting server certificate.
    skipVerify: false

    # -- The name of the Secret containing the NGINX Instance Manager CA certificate.
    # Must exist in the same namespace that the NGINX Gateway Fabric control plane is running in (default namespace: nginx-gateway).
    caSecretName: ""

    # -- The name of the Secret containing the client certificate and key for authenticating with NGINX Instance Manager.
    # Must exist in the same namespace that the NGINX Gateway Fabric control plane is running in (default namespace: nginx-gateway).
    clientSSLSecretName: ""

  # @schema
  # type: object
  # properties:
  #   disableHTTP2:
  #     description: DisableHTTP2 defines if http2 should be disabled for all servers.
  #     type: boolean
  #   disableSNIHostValidation:
  #     description: DisableSNIHostValidation disables the validation that ensures the SNI hostname matches the Host header in HTTPS requests. This resolves HTTP/2 connection coalescing issues with wildcard certificates but introduces security risks as described in Gateway API GEP-3567.
  #     type: boolean
  #   ipFamily:
  #     description: IPFamily specifies the IP family to be used by the NGINX.
  #     type: string
  #     enum:
  #       - ipv4
  #       - ipv6
  #       - dual
  #   rewriteClientIP:
  #     type: object
  #     description: RewriteClientIP defines configuration for rewriting the client IP to the original client's IP.
  #     properties:
  #       mode:
  #         type: string
  #         enum:
  #           - ProxyProtocol
  #           - XForwardedFor
  #       setIPRecursively:
  #         type: boolean
  #       trustedAddresses:
  #         type: array
  #         items:
  #           properties:
  #             type:
  #               type: string
  #               enum:
  #                 - CIDR
  #                 - IPAddress
  #                 - Hostname
  #             value:
  #               type: string
  #   telemetry:
  #     type: object
  #     description: Telemetry specifies the OpenTelemetry configuration.
  #     properties:
  #       exporter:
  #         type: object
  #         properties:
  #           endpoint:
  #             type: string
  #             pattern: ^(?:http?:\/\/)?[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)*(?::\d{1,5})?$
  #           interval:
  #             type: string
  #             pattern: ^\d{1,4}(ms|s)?$
  #           batchSize:
  #             type: integer
  #             minimum: 0
  #           batchCount:
  #             type: integer
  #             minimum: 0
  #       serviceName:
  #         type: string
  #         pattern: ^[a-zA-Z0-9_-]+$
  #       spanAttributes:
  #         type: array
  #         items:
  #           properties:
  #             key:
  #               type: string
  #               pattern: ^([^"$\\]|\\[^$])*$
  #               minLength: 1
  #               maxLength: 255
  #             value:
  #               type: string
  #               pattern: ^([^"$\\]|\\[^$])*$
  #               minLength: 1
  #               maxLength: 255
  #       disabledFeatures:
  #         type: array
  #         items:
  #           type: string
  #           enum:
  #             - DisableTracing
  #   metrics:
  #     type: object
  #     description: Metrics defines the configuration for Prometheus scraping metrics.
  #     properties:
  #       disable:
  #         type: boolean
  #       port:
  #         type: integer
  #         minimum: 1
  #         maximum: 65535
  #   logging:
  #     type: object
  #     description: Logging defines logging related settings for NGINX.
  #     properties:
  #       errorLevel:
  #         type: string
  #         enum:
  #           - debug
  #           - info
  #           - notice
  #           - warn
  #           - error
  #           - crit
  #           - alert
  #           - emerg
  #       agentLevel:
  #         type: string
  #         enum:
  #           - debug
  #           - info
  #           - error
  #           - panic
  #           - fatal
  #   nginxPlus:
  #     type: object
  #     description: NginxPlus specifies NGINX Plus additional settings.
  #     properties:
  #       allowedAddresses:
  #         type: array
  #         items:
  #           properties:
  #             type:
  #               type: string
  #               enum:
  #                 - CIDR
  #                 - IPAddress
  #             value:
  #               type: string
  #   workerConnections:
  #     type: integer
  #     minimum: 1
  #     maximum: 65535
  #     description: The number of worker connections for NGINX. Default is 1024.
  # @schema
  # -- The configuration for the data plane that is contained in the NginxProxy resource. This is applied globally to all Gateways
  # managed by this instance of NGINX Gateway Fabric.
  config: {}

  # -- The pod configuration for the NGINX data plane pod. This is applied globally to all Gateways managed by this
  # instance of NGINX Gateway Fabric.
  pod: {}
    # -- The termination grace period of the NGINX data plane pod.
    # terminationGracePeriodSeconds: 30

    # -- Tolerations for the NGINX data plane pod.
    # tolerations: []

    # -- The nodeSelector of the NGINX data plane pod.
    # nodeSelector: {}

    # -- The affinity of the NGINX data plane pod.
    # affinity: {}

    # -- The topology spread constraints for the NGINX data plane pod.
    # topologySpreadConstraints: []

    # -- The volumes for the NGINX data plane pod. Use in conjunction with
    # nginx.container.volumeMounts mount additional volumes to the container.
    # volumes: []

  # -- The container configuration for the NGINX container. This is applied globally to all Gateways managed by this
  # instance of NGINX Gateway Fabric.
  container:
    # @schema
    # type: array
    # items:
    #   type: object
    #   properties:
    #     port:
    #       type: integer
    #       required: true
    #       minimum: 1
    #       maximum: 65535
    #     containerPort:
    #       type: integer
    #       required: true
    #       minimum: 1
    #       maximum: 65535
    # @schema
    # -- A list of HostPorts to expose on the host.
    # This configuration allows containers to bind to a specific port on the host node,
    # enabling external network traffic to reach the container directly through the host's IP address and port.
    # Use this option when you need to expose container ports on the host for direct access,
    # such as for debugging, legacy integrations, or when NodePort/LoadBalancer services are not suitable.
    # Note: Using hostPort may have security and scheduling implications, as it ties pods to specific nodes and ports.
    hostPorts: []
    # - port: 80
    #   containerPort: 80

    # -- The resource requirements of the NGINX container. You should set this value if you want to use dataplane Autoscaling(HPA).
    resources: {}

    # -- The lifecycle of the NGINX container.
    lifecycle: {}

    # -- volumeMounts are the additional volume mounts for the NGINX container.
    volumeMounts: []

    ## -- Defines the settings for the data plane readiness probe. This probe returns Ready when the NGINX data plane is ready to serve traffic.
    readinessProbe: {}
      # @schema
      # type: integer
      # minimum: 1
      # maximum: 65535
      # @schema
      # -- Port in which the readiness endpoint is exposed.
      # port: 8081

      # -- The number of seconds after the Pod has started before the readiness probes are initiated.
      # initialDelaySeconds: 3

  # -- The service configuration for the NGINX data plane. This is applied globally to all Gateways managed by this
  # instance of NGINX Gateway Fabric.
  service:
    # @schema
    # enum:
    #   - ClusterIP
    #   - NodePort
    #   - LoadBalancer
    # @schema
    # -- The type of service to create for the NGINX data plane.
    type: LoadBalancer

    # @schema
    # enum:
    #   - Cluster
    #   - Local
    # @schema
    # -- The externalTrafficPolicy of the service. The value Local preserves the client source IP.
    externalTrafficPolicy: Local

    # -- The static IP address for the load balancer. Requires nginx.service.type set to LoadBalancer.
    loadBalancerIP: ""

    # -- LoadBalancerClass is the class of the load balancer implementation this Service belongs to.
    # Requires nginx.service.type set to LoadBalancer.
    loadBalancerClass: ""

    # -- The IP ranges (CIDR) that are allowed to access the load balancer. Requires nginx.service.type set to LoadBalancer.
    loadBalancerSourceRanges: []

    # @schema
    # type: array
    # items:
    #   type: object
    #   properties:
    #     port:
    #       type: integer
    #       required: true
    #       minimum: 1
    #       maximum: 65535
    #     listenerPort:
    #       type: integer
    #       required: true
    #       minimum: 1
    #       maximum: 65535
    # @schema
    # -- A list of NodePorts to expose on the NGINX data plane service. 
    # Each NodePort MUST map to a Gateway listener port,
    # otherwise it will be ignored. The default NodePort range enforced by Kubernetes is 30000-32767.
    nodePorts: []
    # - port: 30025
    #   listenerPort: 80

    # -- Custom patches to apply to the NGINX Service.
    patches: []
    # -- Example:
    #   - type: JSONPatch
    #     value:
    #       - op: replace
    #         path: /spec/sessionAffinity
    #         value: "ClientIP"

  # -- Enable debugging for NGINX. Uses the nginx-debug binary. The NGINX error log level should be set to debug in the NginxProxy resource.
  debug: false

# -- The certGenerator section contains the configuration for the cert-generator Job.
certGenerator:
  # -- The annotations of the cert-generator Job.
  annotations: {}

  # -- The name of the Secret containing TLS CA, certificate, and key for the NGINX Gateway Fabric control plane
  # to securely communicate with the NGINX Agent. Must exist in the same namespace that the NGINX Gateway Fabric
  # control plane is running in (default namespace: nginx-gateway).
  serverTLSSecretName: server-tls

  # -- The name of the base Secret containing TLS CA, certificate, and key for the NGINX Agent to securely
  # communicate with the NGINX Gateway Fabric control plane. Must exist in the same namespace that the
  # NGINX Gateway Fabric control plane is running in (default namespace: nginx-gateway).
  agentTLSSecretName: agent-tls

  # -- Overwrite existing TLS Secrets on startup.
  overwrite: false

  # -- How long to wait after the cert generator job has finished before it is removed by the job controller.
  ttlSecondsAfterFinished: 30

  # -- Tolerations for the cert-generator pod.
  tolerations: []

  # -- The nodeSelector of the cert-generator pod.
  nodeSelector: {}

  # -- The affinity of the cert-generator pod.
  affinity: {}

  # -- The topology spread constraints for the cert-generator pod.
  topologySpreadConstraints: []

# -- A list of Gateway objects. View https://gateway-api.sigs.k8s.io/reference/spec/#gateway for full Gateway reference.
gateways: []

# Example gateway object:
# name: nginx-gateway
# namespace: default
# labels:
#   key: value
# annotations:
#   annotationKey: annotationValue
# spec:
#   gatewayClassName: nginx
#   infrastructure:
#     annotations:
#       networking.gke.io/load-balancer-type: Internal
#   listeners:
#     - name: https
#       port: 80
#       protocol: HTTPS
#       tls:
#         mode: Terminate
#         certificateRefs:
#           - kind: Secret
#             name: my-secret
#             namespace: certificate
#       allowedRoutes:
#         namespaces:
#           from: Same
